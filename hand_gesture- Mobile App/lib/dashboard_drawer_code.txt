import 'package:flutter/material.dart';
import 'package:camera/camera.dart';
import 'package:hand_gesture/youtube_player.dart';
import 'package:hand_gesture/zeegocloud.dart';
import 'aboutus.dart';
// ignore: unused_import
import 'package:hand_gesture/main.dart';
import 'package:permission_handler/permission_handler.dart';

List<CameraDescription> cameras = [];


Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  cameras = await availableCameras();
  runApp(CameraScreen(cameras:cameras));
}

// ignore: must_be_immutable
class Dashboard extends StatelessWidget {
  final List<CameraDescription> cameras;
  Dashboard({Key? key, required this.cameras}) : super(key: key);
  var height, width;

  List imgData = [
    "images/camera.png",
    "images/video.png",
    "images/chat.png",
    "images/translater.png",
    "images/learn.png",
    "images/about.png",
  ];

  List titles = [
    "Camera",
    "Video Call",
    "Chat",
    "Translator",
    "Learn Signs",
    "About Us",
  ];

  

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Dashboard"),
        leading: Builder( // Use Builder to obtain a context that is a child of Scaffold
          builder: (BuildContext context) {
            return IconButton(
              icon: Icon(Icons.sort),
              onPressed: () => Scaffold.of(context).openDrawer(), // Now it works!
            );
          },
        ),
      ),
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: <Widget>[
            DrawerHeader(
              decoration: BoxDecoration(
                color: Colors.deepPurpleAccent,
              ), 
              child: Text(
                'Menu',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 24,
                ),
              ),
            ),
          ],
        ),
      ),
      body:SingleChildScrollView(
        child: Container(
          color: Colors.deepPurple,
          //height: height,
          width: width,
          child: Column(
            children: [
              // Your existing UI code for the top part of the dashboard
              Container(
                decoration: BoxDecoration(),
                //height: height * 0.23,
                height: height ,
                width: width ,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                  Padding(
                    padding: EdgeInsets.only(
                      top: 35,
                      left: 20,
                      right: 20,
                    ),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                      InkWell(
                        onTap: (){},
                        child: Icon(
                          Icons.sort,
                          color: Colors.white,
                          size: 40,
                        ),
                      ),
                      Container(
                            height: 50,
                            width: 50,
                        decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(15),
                          color: Colors.white,
                          image: DecorationImage(
                            image: AssetImage(
                              "images/sign.png",
                            ))),
                        
                      ),
                    ],
                    ),
                  ),
                  Padding(
                    padding: EdgeInsets.only(
                      top: 20,
                      left: 30,
                      
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          "Welcome!",
                          style: TextStyle(
                            fontSize: 30,
                            color: Colors.white,
                            fontWeight: FontWeight.w500,
                            letterSpacing: 1,
                          ),
                        ),
                        SizedBox(height: 10),
                        Text(
                          "Last Updated Today",
                          style: TextStyle(
                            fontSize: 16,
                            color: Colors.white54,
                            letterSpacing: 1,
                          ),
                        )
                      ],
                    ),
                  ),
                ],
                ),
              ),
          
               SingleChildScrollView(
                 child: Container(
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.only(
                      topLeft: Radius.circular(30),
                      topRight: Radius.circular(30),
                    ),
                  ),
                  //height: height,
                  width: width ,
                  padding: EdgeInsets.only(bottom: 20),
                  child: GridView.builder(
                    gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                      crossAxisCount: 2,
                      childAspectRatio: 1.1,
                      mainAxisSpacing: 25,
                    ),
                    shrinkWrap: true,
                    physics: NeverScrollableScrollPhysics(),
                    itemCount: imgData.length,
                    itemBuilder: (context, index) {
                      return MouseRegion(
                        cursor: SystemMouseCursors.click,
                        child: InkWell(
                          onTap: () async { // Details of the card clicked
                            
                            if (titles[index] == "Video Call") {
                              // Example callID and userName generation. Adjust according to your app's logic.
                              String callID = "call_id"; // This should be unique for each call session.
                              String userName = "User123"; // This should be the current user's name or ID.

                              Navigator.of(context).push(
                                MaterialPageRoute(builder: (context) => CallPage(callID: callID, uName: userName)),
                              );
                            } else if (titles[index] == "About Us") {
                              Navigator.of(context).push(
                                MaterialPageRoute(builder: (context) => AboutUsPage()),
                              );
                            } else if (titles[index] == "Camera") {
                              // Check for camera permission first
                              var cameraStatus = await Permission.camera.status;
                              if (!cameraStatus.isGranted) {
                                await Permission.camera.request();
                              }
                              // Double-check if permission is granted
                              if (await Permission.camera.isGranted) {
                                Navigator.of(context).push(MaterialPageRoute(
                                  builder: (context) => CameraScreen(cameras: cameras),
                                ));
                              }
                            } else if (titles[index] == "Learn Signs") {
                              // Navigate to the YouTube playlist screen
                              Navigator.of(context).push(
                                MaterialPageRoute(builder: (context) => YoutubeVideoListScreen(videos: youtubeVideos)),
                              );
                            } else {
                              // Handle other options with a generic dialog
                              showDialog(
                                context: context,
                                builder: (BuildContext context) {
                                  return AlertDialog(
                                    title: Text("Item Details"),
                                    content: Text("Details about the item tapped."),
                                    actions: [
                                      TextButton(
                                        child: Text("Close"),
                                        onPressed: () {
                                          Navigator.of(context).pop();
                                        },
                                      ),
                                    ],
                                  );
                                },
                              );
                            }
                          },

                          child: Container(
                            margin: EdgeInsets.symmetric(vertical: 8, horizontal: 20),
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(20),
                              color: Colors.white,
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.black26,
                                  spreadRadius: 1,
                                  blurRadius: 6,
                                ),
                              ],
                            ),
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                              children: [
                                Image.asset(imgData[index], width: 100),
                                Text(
                                  titles[index],
                                  style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                                ),
                              ],
                            ),
                          ),
                        ),
                      );
                    },
                    ),
                  ),
               ),
            ],
          ),
        ),
      ),
    );
  }


// ignore: unused_element
Future<void> _checkPermissions() async {
    await Permission.camera.request();
    // Add more permission requests here if needed
  }
}

class CameraScreen extends StatefulWidget {
  final List<CameraDescription> cameras;
  CameraScreen({Key? key, required this.cameras}) : super(key: key);

  @override
  _CameraScreenState createState() => _CameraScreenState();
}


class _CameraScreenState extends State<CameraScreen> {
  CameraController? controller;

 @override
void initState() {
  super.initState();
  if (cameras.isNotEmpty) {
    controller = CameraController(cameras[0], ResolutionPreset.medium);
    controller!.initialize().then((_) {
      if (!mounted) {
        return;
      }
      setState(() {});
    });
  } else {
    print("No cameras found");
  }
}


  @override
  void dispose() {
    controller?.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (controller == null || !controller!.value.isInitialized) {
      return Scaffold(
        body: Center(child: Text("No Camera Available")),
      );
    }
    return Scaffold(
      appBar: AppBar(title: Text("Camera")),
      body: CameraPreview(controller!),
    );
  }
}