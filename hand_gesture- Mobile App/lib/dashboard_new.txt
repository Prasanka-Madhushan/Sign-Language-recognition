import 'package:flutter/material.dart';
import 'package:camera/camera.dart';
import 'package:hand_gesture/camera.dart';
import 'package:hand_gesture/youtube_player.dart';
import 'package:hand_gesture/zeegocloud.dart';
import 'aboutus.dart';
// ignore: unused_import
import 'package:hand_gesture/main.dart';
import 'package:permission_handler/permission_handler.dart';

List<CameraDescription> cameras = [];

class Dashboard extends StatelessWidget {
  final List<CameraDescription> cameras;
  Dashboard({Key? key, required this.cameras}) : super(key: key);

  final List<Map<String, dynamic>> items = [
    {"icon": Icons.camera_alt, "title": "Camera", "color": Colors.blue},
    {"icon": Icons.video_call, "title": "Video Call", "color": Colors.green},
    {"icon": Icons.chat, "title": "Chat", "color": Colors.orange},
    {"icon": Icons.translate, "title": "Translator", "color": Colors.red},
    {"icon": Icons.school, "title": "Learn Signs", "color": Colors.purple},
    {"icon": Icons.info, "title": "About Us", "color": Colors.teal},
  ];

//Dashboard Ui Design
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Dashboard"),
        backgroundColor: Colors.deepPurple,
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topRight,
            end: Alignment.bottomLeft,
            colors: [Colors.deepPurple, Colors.indigo],
          ),
        ),
        child: GridView.builder(
          padding: EdgeInsets.all(10),
          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 2,
            childAspectRatio: 1.0,
            crossAxisSpacing: 10,
            mainAxisSpacing: 10,
          ),
          itemCount: items.length,
          itemBuilder: (context, index) {
            return Card(
              elevation: 5,
              child: InkWell(
                onTap: () => onTapHandler(context, items[index]['title']),
                child: Container(
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(10),
                    color: items[index]['color'].withOpacity(0.2),
                  ),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: <Widget>[
                      Icon(items[index]['icon'], size: 50, color: items[index]['color']),
                      SizedBox(height: 10),
                      Text(
                        items[index]['title'],
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: items[index]['color'],
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            );
          },
        ),
      ),
    );
  }
  
  //Handling the Icons click events
  void onTapHandler(BuildContext context, String title) {
    switch (title) {
      case "Camera":
        handleCameraTap(context);
        break;
      case "Video Call":
        Navigator.of(context).push(MaterialPageRoute(
          builder: (context) => CallPage(callID: "call_id", uName: "User123"), // Adjust according to your setup
        ));
        break;
      case "About Us":
        Navigator.of(context).push(MaterialPageRoute(builder: (context) => AboutUsPage()));
        break;
      case "Learn Signs":
        Navigator.of(context).push(MaterialPageRoute(builder: (context) => YoutubeVideoListScreen(videos: youtubeVideos))); // Ensure youtubeVideos is defined
        break;
        
      default:
      // Handle other options with a generic dialog
        showGenericDialog(context, "Item Details", "Details about the item tapped.");
        break;
      }
  }

Future<void> handleCameraTap(BuildContext context) async {
    var cameraStatus = await Permission.camera.status;
    if (!cameraStatus.isGranted) {
      await Permission.camera.request();
    }
    if (await Permission.camera.isGranted) {
      Navigator.of(context).push(MaterialPageRoute(
        builder: (context) => CameraScreen(cameras: cameras),
      ));
    } else {
      showPermissionDeniedDialog(context);
    }
  }

  void showPermissionDeniedDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text("Camera Permission"),
          content: Text("Camera permission is required to access the camera."),
          actions: [
            TextButton(
              child: Text("OK"),
              onPressed: () => Navigator.of(context).pop(),
            ),
          ],
        );
      },
    );
  }
}                        

void showGenericDialog(BuildContext context, String title, String content) {
  showDialog(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        title: Text(title),
        content: Text(content),
        actions: [
          TextButton(
            child: Text("Close"),
            onPressed: () => Navigator.of(context).pop(),
          ),
        ],
      );
    },
  );
}