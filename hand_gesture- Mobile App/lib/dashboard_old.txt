import 'package:flutter/material.dart';
import 'package:camera/camera.dart';
import 'package:hand_gesture/camera.dart';
import 'package:hand_gesture/youtube_player.dart';
import 'package:hand_gesture/zeegocloud.dart';
import 'aboutus.dart';
// ignore: unused_import
import 'package:hand_gesture/main.dart';
import 'package:permission_handler/permission_handler.dart';

List<CameraDescription> cameras = [];


Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  cameras = await availableCameras();
  runApp(CameraScreen(cameras:cameras));
}

// ignore: must_be_immutable
class Dashboard extends StatelessWidget {
  final List<CameraDescription> cameras;
  Dashboard({Key? key, required this.cameras}) : super(key: key);
  var height, width;

  List imgData = [
    "images/camera.png",
    "images/video.png",
    "images/chat.png",
    "images/translater.png",
    "images/learn.png",
    "images/about.png",
  ];

  List titles = [
    "Camera",
    "Video Call",
    "Chat",
    "Translator",
    "Learn Signs",
    "About Us",
  ];

  @override
  Widget build(BuildContext context){
    height = MediaQuery.of(context).size.height;
    width = MediaQuery.of(context).size.width;

    return Scaffold(
      body:SingleChildScrollView(
        child: Container(
          color: Colors.deepPurple,
          //height: height,
          width: width,
          child: Column(
            children: [
              // Your existing UI code for the top part of the dashboard
              Container(
                decoration: BoxDecoration(),
                height: height * 0.23,
                width: width ,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                  Padding(
                    padding: EdgeInsets.only(
                      top: 35,
                      left: 20,
                      right: 20,
                    ),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                      InkWell(
                        onTap: (){},
                        child: Icon(
                          Icons.sort,
                          color: Colors.white,
                          size: 40,
                        ),
                      ),
                      Container(
                            height: 50,
                            width: 50,
                        decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(15),
                          color: Colors.white,
                          image: DecorationImage(
                            image: AssetImage(
                              "images/sign.png",
                            ))),
                        
                      ),
                    ],
                    ),
                  ),
                  Padding(
                    padding: EdgeInsets.only(
                      top: 20,
                      left: 30,
                      
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          "Welcome!",
                          style: TextStyle(
                            fontSize: 30,
                            color: Colors.white,
                            fontWeight: FontWeight.w500,
                            letterSpacing: 1,
                          ),
                        ),
                        SizedBox(height: 10),
                        Text(
                          "Last Updated Today",
                          style: TextStyle(
                            fontSize: 16,
                            color: Colors.white54,
                            letterSpacing: 1,
                          ),
                        )
                      ],
                    ),
                  ),
                ],
                ),
              ),
          
               SingleChildScrollView(
                 child: Container(
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.only(
                      topLeft: Radius.circular(30),
                      topRight: Radius.circular(30),
                    ),
                  ),
                  //height: height,
                  width: width ,
                  padding: EdgeInsets.only(bottom: 20),
                  child: GridView.builder(
                    gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                      crossAxisCount: 2,
                      childAspectRatio: 1.1,
                      mainAxisSpacing: 25,
                    ),
                    shrinkWrap: true,
                    physics: NeverScrollableScrollPhysics(),
                    itemCount: imgData.length,
                    itemBuilder: (context, index) {
                      return MouseRegion(
                        cursor: SystemMouseCursors.click,
                        child: InkWell(
                          onTap: () async {
                            switch (titles[index]) {
                              case "Video Call":
                                String callID = "call_id"; // Unique ID for each call session
                                String userName = "User123"; // User's name or ID

                                Navigator.of(context).push(MaterialPageRoute(
                                  builder: (context) => CallPage(callID: callID, uName: userName),
                                ));
                                break;

                              case "About Us":
                                Navigator.of(context).push(MaterialPageRoute(
                                  builder: (context) => AboutUsPage(),
                                ));
                                break;

                              case "Camera":
                                var cameraStatus = await Permission.camera.status;
                                if (!cameraStatus.isGranted) {
                                  await Permission.camera.request();
                                }
                                if (await Permission.camera.isGranted) {
                                  Navigator.of(context).push(MaterialPageRoute(
                                    builder: (context) => CameraScreen(cameras: cameras),
                                  ));
                                } else {
                                  // Show a dialog if camera permission is denied
                                  showPermissionDeniedDialog(context);
                                }
                                break;

                              case "Learn Signs":
                                Navigator.of(context).push(MaterialPageRoute(
                                  builder: (context) => YoutubeVideoListScreen(videos: youtubeVideos),
                                ));
                                break;

                              default:
                                // Handle other options with a generic dialog
                                showGenericDialog(context, "Item Details", "Details about the item tapped.");
                                break;
                            }
                          },


                          child: Container(
                            margin: EdgeInsets.symmetric(vertical: 8, horizontal: 20),
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(20),
                              color: Colors.white,
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.black26,
                                  spreadRadius: 1,
                                  blurRadius: 6,
                                ),
                              ],
                            ),
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                              children: [
                                Image.asset(imgData[index], width: 100),
                                Text(
                                  titles[index],
                                  style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                                ),
                              ],
                            ),
                          ),
                        ),
                      );
                    },
                    ),
                  ),
               ),
            ],
          ),
        ),
      ),
    );
  }
}

void showPermissionDeniedDialog(BuildContext context) {
  showDialog(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        title: Text("Camera Permission"),
        content: Text("Camera permission is required to access the camera."),
        actions: [
          TextButton(
            child: Text("OK"),
            onPressed: () => Navigator.of(context).pop(),
          ),
        ],
      );
    },
  );
}

void showGenericDialog(BuildContext context, String title, String content) {
  showDialog(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        title: Text(title),
        content: Text(content),
        actions: [
          TextButton(
            child: Text("Close"),
            onPressed: () => Navigator.of(context).pop(),
          ),
        ],
      );
    },
  );
}
                              